---
title: "Frankies Composite Analysis Report"
subtitle: "Multi-Experiment Comparison"
format:
  dashboard:
    theme: frankies.scss
    icon: body-text
    orientation: columns
    nav-buttons:
      - icon: github
        href: https://github.com/Santollan/Frankies/
---

```{python}
#| label: load_libs
import os
import pandas as pd
import numpy as np
import json
import plotly.express as px
import plotly.graph_objects as go
from IPython.display import display, HTML
from itables import show
import re

# Hardcoded experiment directories - update these manually in the file
experiment_dirs = [
    "/home/nicholas/Documents/GitHub/Frankies/experiments/anti_HA_test_CF_03",
    "/home/nicholas/Documents/GitHub/Frankies/experiments/anti_HA_test_CF_04",
    "/home/nicholas/Documents/GitHub/Frankies/experiments/anti_HA_test_CF_06"
]

print(f"Processing {len(experiment_dirs)} experiment directories:")
for exp_dir in experiment_dirs:
    print(f"  - {exp_dir}")
```

```{python}
#| label: load_data
# Function to load data from an experiment
def load_experiment_data(experiment_dir):
    try:
        # Get experiment name (last part of the path)
        exp_name = os.path.basename(experiment_dir)
        
        # Define file paths
        clt_file = os.path.join(experiment_dir, "4_docking/output/10_caprieval/capri_clt.tsv")
        ss_file = os.path.join(experiment_dir, "4_docking/output/10_caprieval/capri_ss.tsv")
        
        # Initialize result dict
        result = {
            "experiment_name": exp_name,
            "experiment_dir": experiment_dir,
            "clt_df": None,
            "ss_df": None,
            "metrics": {},
            "best_model": None,
            "best_model_path": None
        }
        
        # Check if files exist
        if not os.path.exists(clt_file):
            print(f"Missing clt file for {exp_name}: {clt_file}")
            return result
            
        if not os.path.exists(ss_file):
            print(f"Missing ss file for {exp_name}: {ss_file}")
            return result
            
        # Load data
        clt_df = pd.read_csv(clt_file, sep='\t', comment='#')
        ss_df = pd.read_csv(ss_file, sep='\t', comment='#')
        
        result["clt_df"] = clt_df
        result["ss_df"] = ss_df
        
        # Get best ranking cluster
        if "cluster_rank" in clt_df.columns and "cluster_id" in clt_df.columns:
            best_cluster = clt_df.loc[clt_df["cluster_rank"] == 1]
            if not best_cluster.empty:
                best_cluster_id = int(best_cluster["cluster_id"].values[0])
                
                # Extract metrics from best cluster
                for col in ["n", "score", "score_std", "irmsd", "irmsd_std", "dockq", "dockq_std"]:
                    if col in best_cluster.columns:
                        result["metrics"][col] = float(best_cluster[col].values[0])
                
                # Get best model from cluster
                if "cluster-id" in ss_df.columns:
                    ss_df_best = ss_df[ss_df["cluster-id"] == best_cluster_id]
                    if not ss_df_best.empty and "vdw" in ss_df_best.columns:
                        lowest_vdw_row = ss_df_best.loc[ss_df_best["vdw"].idxmin()]
                        if "model" in lowest_vdw_row:
                            best_model = lowest_vdw_row["model"].replace('../08_mdscoring/','')
                            result["best_model"] = best_model
                            
                            # Construct path to best model PDB
                            result["best_model_path"] = os.path.join(
                                experiment_dir, 
                                "4_docking/output/08_mdscoring", 
                                best_model
                            )
        
        return result
    except Exception as e:
        print(f"Error processing {experiment_dir}: {e}")
        import traceback
        traceback.print_exc()
        return {
            "experiment_name": os.path.basename(experiment_dir),
            "experiment_dir": experiment_dir,
            "error": str(e)
        }

# Load data from all experiments
experiment_data = []
for exp_dir in experiment_dirs:
    data = load_experiment_data(exp_dir)
    experiment_data.append(data)

# Create comparison dataframe
all_metrics = []
for exp in experiment_data:
    if exp.get("metrics"):
        metrics = exp["metrics"].copy()
        metrics["experiment"] = exp["experiment_name"]
        all_metrics.append(metrics)

if all_metrics:
    comparison_df = pd.DataFrame(all_metrics)
    print("Created comparison dataframe with columns:", comparison_df.columns.tolist())
else:
    comparison_df = pd.DataFrame()
    print("No metrics data available for comparison")
```

# Performance Comparison

## Column {width=30%}

### Experiment Summary

```{python}
#| label: experiment-summary
if not comparison_df.empty:
    # Create summary table
    summary_cols = ["experiment"]
    metric_cols = ["score", "irmsd", "dockq"]
    
    for col in metric_cols:
        if col in comparison_df.columns:
            summary_cols.append(col)
    
    summary_df = comparison_df[summary_cols].copy()
    
    # Format values to 2 decimal places
    for col in summary_cols[1:]:
        summary_df[col] = summary_df[col].apply(lambda x: f"{float(x):.2f}")
    
    # Convert to HTML with styling
    summary_html = summary_df.to_html(index=False, classes="table table-striped table-hover")
    summary_html = f"""
    <div style='max-height: 400px; overflow-y: auto;'>
        {summary_html}
    </div>
    """
    
    display(HTML(summary_html))
else:
    print("No experiment data available for summary")
```

### Best Experiment

```{python}
#| label: best-experiment
#| component: valuebox
#| title: Best Performing Experiment

if not comparison_df.empty and "score" in comparison_df.columns:
    # Find the experiment with the best score (lowest value)
    best_idx = comparison_df["score"].idxmin()
    best_exp = comparison_df.loc[best_idx, "experiment"]
    best_score = float(comparison_df.loc[best_idx, "score"])
    
    dict(
        color = "primary",
        value = f"{best_exp}\nScore: {best_score:.2f}"
    )
else:
    dict(
        color = "light",
        value = "No data available"
    )
```

### Most Accurate Model

```{python}
#| label: best-irmsd
#| component: valuebox
#| title: Most Accurate Model (iRMSD)

if not comparison_df.empty and "irmsd" in comparison_df.columns:
    # Find the experiment with the best irmsd (lowest value)
    best_idx = comparison_df["irmsd"].idxmin()
    best_exp = comparison_df.loc[best_idx, "experiment"]
    best_irmsd = float(comparison_df.loc[best_idx, "irmsd"])
    
    dict(
        color = "success",
        value = f"{best_exp}\niRMSD: {best_irmsd:.2f}"
    )
else:
    dict(
        color = "light",
        value = "No data available"
    )
```

### Highest DockQ Score

```{python}
#| label: best-dockq
#| component: valuebox
#| title: Highest Quality Model (DockQ)

if not comparison_df.empty and "dockq" in comparison_df.columns:
    # Find the experiment with the best dockq (highest value)
    best_idx = comparison_df["dockq"].idxmax()
    best_exp = comparison_df.loc[best_idx, "experiment"]
    best_dockq = float(comparison_df.loc[best_idx, "dockq"])
    
    dict(
        color = "info",
        value = f"{best_exp}\nDockQ: {best_dockq:.2f}"
    )
else:
    dict(
        color = "light",
        value = "No data available"
    )
```

## Column {width=70%}

### Score Comparison

```{python}
#| label: score-comparison

if not comparison_df.empty and "score" in comparison_df.columns:
    # Sort by score (lower is better)
    sorted_df = comparison_df.sort_values("score")
    
    # Create bar chart
    fig = go.Figure()
    
    # Add bars
    fig.add_trace(go.Bar(
        x=sorted_df["experiment"],
        y=sorted_df["score"],
        marker_color='#005035',
        error_y=dict(
            type='data',
            array=sorted_df["score_std"] if "score_std" in sorted_df.columns else None,
            visible=True
        )
    ))
    
    # Update layout
    fig.update_layout(
        title="HADDOCK Score Comparison (lower is better)",
        xaxis_title="Experiment",
        yaxis_title="Score",
        paper_bgcolor="white",
        plot_bgcolor="#f8f9fa",
        font_color="#222",
        margin=dict(l=20, r=20, t=40, b=20),
    )
    
    fig.show()
else:
    print("No score data available for visualization")
```

### iRMSD Comparison

```{python}
#| label: irmsd-comparison

if not comparison_df.empty and "irmsd" in comparison_df.columns:
    # Sort by irmsd (lower is better)
    sorted_df = comparison_df.sort_values("irmsd")
    
    # Create bar chart
    fig = go.Figure()
    
    # Add bars
    fig.add_trace(go.Bar(
        x=sorted_df["experiment"],
        y=sorted_df["irmsd"],
        marker_color='#A49665',
        error_y=dict(
            type='data',
            array=sorted_df["irmsd_std"] if "irmsd_std" in sorted_df.columns else None,
            visible=True
        )
    ))
    
    # Update layout
    fig.update_layout(
        title="Interface RMSD Comparison (lower is better)",
        xaxis_title="Experiment",
        yaxis_title="iRMSD (Ã…)",
        paper_bgcolor="white",
        plot_bgcolor="#f8f9fa",
        font_color="#222",
        margin=dict(l=20, r=20, t=40, b=20),
    )
    
    fig.show()
else:
    print("No iRMSD data available for visualization")
```

### DockQ Comparison

```{python}
#| label: dockq-comparison

if not comparison_df.empty and "dockq" in comparison_df.columns:
    # Sort by dockq (higher is better)
    sorted_df = comparison_df.sort_values("dockq", ascending=False)
    
    # Create bar chart
    fig = go.Figure()
    
    # Add bars
    fig.add_trace(go.Bar(
        x=sorted_df["experiment"],
        y=sorted_df["dockq"],
        marker_color='#007377',
        error_y=dict(
            type='data',
            array=sorted_df["dockq_std"] if "dockq_std" in sorted_df.columns else None,
            visible=True
        )
    ))
    
    # Update layout
    fig.update_layout(
        title="DockQ Score Comparison (higher is better)",
        xaxis_title="Experiment",
        yaxis_title="DockQ Score",
        paper_bgcolor="white",
        plot_bgcolor="#f8f9fa",
        font_color="#222",
        margin=dict(l=20, r=20, t=40, b=20),
    )
    
    fig.show()
else:
    print("No DockQ data available for visualization")
```

# Experiment Details

## Column {width=100%}

### Individual Reports

```{python}
#| label: report-links

report_html = "<div class='container'><div class='row'>"

for exp in experiment_data:
    exp_name = exp.get("experiment_name", "Unknown")
    exp_dir = exp.get("experiment_dir", "")
    metrics = exp.get("metrics", {})
    
    report_path = os.path.join(exp_dir, "5_postprocess/frankies_report.html")
    
    # Create a card for each experiment
    card_html = f"""
    <div class='col-md-4 mb-4'>
        <div class='card'>
            <div class='card-header bg-primary text-white'>
                <h5 class='card-title mb-0'>{exp_name}</h5>
            </div>
            <div class='card-body'>
    """
    
    # Add metrics if available
    if metrics:
        card_html += "<table class='table table-sm'><tbody>"
        if "score" in metrics:
            card_html += f"<tr><td>Score</td><td>{metrics['score']:.2f}</td></tr>"
        if "irmsd" in metrics:
            card_html += f"<tr><td>iRMSD</td><td>{metrics['irmsd']:.2f}</td></tr>"
        if "dockq" in metrics:
            card_html += f"<tr><td>DockQ</td><td>{metrics['dockq']:.2f}</td></tr>"
        if "n" in metrics:
            card_html += f"<tr><td>Structures</td><td>{int(metrics['n'])}</td></tr>"
        card_html += "</tbody></table>"
    
    # Add link to detailed report
    if os.path.exists(report_path):
        card_html += f"""
            </div>
            <div class='card-footer'>
                <a href='{report_path}' class='btn btn-outline-primary btn-sm' target='_blank'>View Detailed Report</a>
            </div>
        </div>
    </div>
        """
    else:
        card_html += f"""
            </div>
            <div class='card-footer'>
                <span class='text-muted'>No detailed report available</span>
            </div>
        </div>
    </div>
        """
    
    report_html += card_html

report_html += "</div></div>"
display(HTML(report_html))
```

### Data Table

```{python}
#| label: data-table
#| title: Metrics Comparison

if not comparison_df.empty:
    # Add some columns for better sorting/filtering
    table_df = comparison_df.copy()
    
    # Display the table
    show(table_df, lengthMenu=[5, 10, 25, 50, 100], showIndex=False)
else:
    print("No data available for comparison")
```